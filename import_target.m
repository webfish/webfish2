function import_target(process)
global last_process
global folder
global target_seq
global target_name
global target_file
global blast_length
global fatal_error
global restrict_sequence

%% Load saved target sequences
if last_process >= process
    load([folder 'mats/fp' num2str(process) '.mat']);
    write_log(process, 'Loaded target sequence');
    write_log(process);
    return
end

%% Import target sequences from fasta file
target_file = read_config('tar_seq', process, true);
file = dir(target_file);
if isempty(file)
    fatal_error = 1;
    fatal_msg(process, {['Target file "' target_file '" does not exist']});
    return
end
[target_name target_seq] = import_fasta_sequence(target_file, process);
if fatal_error > 0; return; end

tsl = sum(cellfun(@length, target_seq));
if tsl > blast_length
	fatal_error = 1;
    fatal_msg(process, {['Target sequence is too long (' num2str(tsl) ...
        ' bp)'], ['Maximum target sequence length is ' ...
        num2str(blast_length) ' bp']});
    return
end

%% Check if the user-provided restrict sequences are within the
%% length of the query sequences
if numel(restrict_sequence) ~= numel(target_seq)
    restrict_sequence = cell(size(target_sequence));
    if any(~cellfun(@isempty, restrict_sequence))
        error_msg(process, st, ...
                  {['The number of restrict_sequences you have ' ...
                    'provided does not match the number of queries!'], ...
                   'No restrict sequences will be used.'})
    end
end

%% Check if the restrict sequences are within the length of the
%% query
for j = 1 : numel(target_seq)
    valIn = false(size(restrict_sequence{j}, 1), 2);
    for i = 1 : size(restrict_sequence{j}, 1)
        %% Check is restrict sequence starts before it ends
        if restrict_sequence{j}(i, 1) >= restrict_sequence{j}(i, 2)
            valIn(i, :) = true;
            error_msg(process, st, ...
                      {['The restrict sequence has start before it ' ...
                        'ends be before its end!'], ...
                       sprintf(['Your restrict sequence starts at ' ...
                                '%d and ends at %s'], ...
                               restrict_sequence{j}(i, 1), ...
                               restrict_sequence{j}(i, 2)), ...
                       'This makes no sense!', ...
                       'This restrict sequence will not be used.'});
        end
        %% Check if restrict sequence start is above 0
        if restrict_sequence{j}(i, 1) < 1
            valIn(i, :) = true;
            error_msg(process, st, ...
                      {sprintf(['The restrict sequence starts at ' ...
                                '%d which is less than 1!'], ...
                               restrict_sequence{j}(i, 1)), ...
                       'This makes no sense!', ...
                       ['This restrict sequence will not be ' ...
                        'used.']});
        end
        %% Check if restrict sequence end is above 0
        if restrict_sequence{j}(i, 2) < 1
            valIn(i, :) = true;
            error_msg(process, st, ...
                      {sprintf(['The restrict sequence ends at ' ...
                                '%d which is less than 1!'], ...
                               restrict_sequence{j}(i, 1)), ...
                       'This makes no sense!', ...
                       ['This restrict sequence will not be ' ...
                        'used.']});
        end
        %% Check if restrict sequence start is before end of the query
        if  restrict_sequence{j}(i, 1) > numel(target_seq{j})
            valIn(i, :) = true;
            error_msg(process, st, ...
                      {sprintf(['The restrict sequence starts at ' ...
                                '%d which more than the length of ' ...
                                'the query!'], ...
                               restrict_sequence{j}(i, 1)), ...
                       'This makes no sense!', ...
                       ['This restrict sequence will not be ' ...
                        'used.']});
        end
        %% Check if restrict sequence end is before end of the query
        if  restrict_sequence{j}(i, 1) > numel(target_seq{j})
            valIn(i, :) = true;
            error_msg(process, st, ...
                      {sprintf(['The restrict sequence ends at ' ...
                                '%d which more than the length of ' ...
                                'the query!'], ...
                               restrict_sequence{j}(i, 1)), ...
                       'This makes no sense!', ...
                       ['This restrict sequence will not be ' ...
                        'used.']});
        end
    end
    restrict_sequence{j}(find(valIn), :) = [];
end


save([folder 'mats/fp' num2str(process) '.mat'], 'target_name', ...
    'target_seq', 'target_file', 'restrict_sequence');
write_log(process, 'Imported target sequence');

%% Process finished
write_log(process);